{"version":3,"sources":["types/cards.ts","hooks/useTypedSelector.ts","plugins/api.ts","store/action-creators/card.ts","store/action-creators/index.ts","hooks/useActions.ts","components/FoxCard/index.tsx","components/CardList/index.tsx","App.tsx","store/reducers/cardReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["CardActionTypes","useTypedSelector","useSelector","api","axios","create","baseURL","interceptors","response","use","res","data","error","Promise","reject","fetchCards","dispatch","a","type","FETCH_CARD","i","push","get","all","result","arrayId","map","el","idMatch","link","match","includes","id","liked","FETCH_CARD_SUCCES","payload","FETCH_CARD_ERROR","likeCard","CARD_LIKE","delCard","CARD_DEL","showLikedCards","SHOW_LIKED_CARDS","CardActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","FoxCard","card","className","src","image","alt","onClick","path","mdiCardsHeart","size","color","mdiDelete","CardList","state","cards","loading","useEffect","noneCardsToDisplay","useMemo","length","filter","checked","onChange","App","initialState","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86443b0b.chunk.js","sourcesContent":["export enum CardActionTypes {\n  FETCH_CARD = \"FETCH_CARD\",\n  FETCH_CARD_SUCCES = \"FETCH_CARD_SUCCES\",\n  FETCH_CARD_ERROR = \"FETCH_CARD_ERROR\",\n  CARD_LIKE = \"CARD_LIKE\",\n  CARD_DEL = \"CARD_DEL\",\n  SHOW_LIKED_CARDS = \"SHOW_LIKED_CARDS\",\n}\n\ninterface FetchCardsAction {\n  type: CardActionTypes.FETCH_CARD;\n}\n\ninterface FetchCardsSuccesAction {\n  type: CardActionTypes.FETCH_CARD_SUCCES;\n  payload: Array<CardType>;\n}\n\ninterface FetchCardsErrorAction {\n  type: CardActionTypes.FETCH_CARD_ERROR;\n  payload: string;\n}\n\ninterface CardLike {\n  type: CardActionTypes.CARD_LIKE;\n  payload: number;\n}\n\ninterface CardDel {\n  type: CardActionTypes.CARD_DEL;\n  payload: number;\n}\n\ninterface ShowLikedCards {\n  type: CardActionTypes.SHOW_LIKED_CARDS;\n  payload: boolean;\n}\n\nexport interface CardType {\n  image: string;\n  liked: boolean;\n  link: string;\n  id: number;\n}\n\nexport interface FoxCardType {\n  card: CardType;\n  liked: boolean;\n}\n\nexport interface CardState {\n  cards: Array<CardType>;\n  liked: boolean;\n  loading: boolean;\n  error: null | string;\n}\n\nexport type CardAction =\n  | FetchCardsAction\n  | FetchCardsErrorAction\n  | FetchCardsSuccesAction\n  | CardLike\n  | CardDel\n  | ShowLikedCards;\n","import { useSelector, TypedUseSelectorHook } from \"react-redux\";\nimport { RootState } from \"./../store/reducers/index\";\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://randomfox.ca\",\n});\n\napi.interceptors.response.use(\n  (res) => {\n    return res.data;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n","import { Dispatch } from \"redux\";\nimport { CardActionTypes, CardAction, CardType } from \"../../types/cards\";\nimport api from \"../../plugins/api\";\n\nexport const fetchCards = () => {\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\n    try {\n      dispatch({ type: CardActionTypes.FETCH_CARD });\n\n      let res: Array<Promise<CardType>> = [];\n      for (let i = 0; i < 6; i++) {\n        res.push(api.get(\"/floof/\"));\n      }\n\n      let result: Array<CardType> = await Promise.all(res);\n\n      let arrayId: Array<number> = [];\n\n      result = result.map((el, i) => {\n        let idMatch: RegExpMatchArray | null = el.link.match(/\\d+/);\n        if (idMatch) {\n          if (arrayId.includes(+idMatch[0])) {\n            el.id = +idMatch[0] * ++i * 1001;\n          } else {\n            el.id = +idMatch[0];\n            arrayId.push(+idMatch[0]);\n          }\n        } else {\n          el.id = ++i * 1000;\n        }\n        el.liked = false;\n        return el;\n      });\n\n      dispatch({\n        type: CardActionTypes.FETCH_CARD_SUCCES,\n        payload: result,\n      });\n    } catch (e) {\n      dispatch({\n        type: CardActionTypes.FETCH_CARD_ERROR,\n        payload: \"Произошла ошибка при запросе картинок\",\n      });\n    }\n  };\n};\n\nexport const likeCard = (id: number) => {\n  return (dispatch: Dispatch<CardAction>) => {\n    dispatch({\n      type: CardActionTypes.CARD_LIKE,\n      payload: id,\n    });\n  };\n};\n\nexport const delCard = (id: number) => {\n  return (dispatch: Dispatch<CardAction>) => {\n    dispatch({\n      type: CardActionTypes.CARD_DEL,\n      payload: id,\n    });\n  };\n};\n\nexport const showLikedCards = (liked: boolean) => {\n  return (dispatch: Dispatch<CardAction>) => {\n    dispatch({\n      type: CardActionTypes.SHOW_LIKED_CARDS,\n      payload: liked,\n    });\n  };\n};\n","import * as CardActionCreators from \"./card\";\n\nexport default CardActionCreators;\n","import { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport ActionCreators from \"../store/action-creators\";\n\ntype ActionCreatorsType = typeof ActionCreators;\n\nexport const useActions = (): ActionCreatorsType => {\n  const dispatch = useDispatch();\n  return bindActionCreators(ActionCreators, dispatch);\n};\n","import React, { FC } from \"react\";\nimport { FoxCardType } from \"../../types/cards\";\nimport { useActions } from \"../../hooks/useActions\";\n\nimport \"./FoxCard.css\";\n\nimport Icon from \"@mdi/react\";\nimport { mdiCardsHeart, mdiDelete } from \"@mdi/js\";\n\nconst FoxCard: FC<FoxCardType> = ({ card, liked }) => {\n  const { likeCard, delCard } = useActions();\n\n  return (\n    <div className={liked && !card.liked ? \"noDisplay\" : \"foxCard\"}>\n      <img src={card.image} alt=\"IseeWinner\"></img>\n      <div className=\"description\">\n        <span className=\"foxCardText\">id:{card.id}</span>\n        <div onClick={() => likeCard(card.id)}>\n          <Icon\n            className=\"icon\"\n            path={mdiCardsHeart}\n            size={1}\n            color={card.liked ? \"red\" : \"gray\"}\n          />\n        </div>\n        <div onClick={() => delCard(card.id)}>\n          <Icon className=\"icon\" path={mdiDelete} size={1} color=\"black\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FoxCard;\n","import React, { FC, useEffect, useMemo } from \"react\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { useActions } from \"../../hooks/useActions\";\n\nimport \"./CardList.css\";\n\nimport FoxCard from \"../FoxCard\";\n\nconst CardList: FC = () => {\n  const { cards, liked, error, loading } = useTypedSelector(\n    (state) => state.card\n  );\n  const { fetchCards, showLikedCards } = useActions();\n\n  useEffect(() => {\n    fetchCards();\n  }, []);\n\n  const noneCardsToDisplay: boolean = useMemo(() => {\n    return (\n      !!cards.length &&\n      (liked ? !!cards.filter((el) => el.liked === liked).length : true)\n    );\n  }, [cards, liked]);\n\n  if (loading) {\n    return <h1>Loading...</h1>;\n  }\n  if (error) {\n    return <h1>Error:{error}</h1>;\n  }\n\n  return (\n    <>\n      <div className=\"header\">\n        <label className=\"switch\">\n          <input\n            type=\"checkbox\"\n            checked={liked}\n            onChange={() => showLikedCards(!liked)}\n          ></input>\n          <span className=\"slider\"></span>\n        </label>\n        <span className=\"checkboxText\">liked</span>\n      </div>\n\n      <div className=\"foxTable\">\n        {noneCardsToDisplay ? (\n          cards.map((card) => (\n            <FoxCard card={card} liked={liked} key={card.id} />\n          ))\n        ) : (\n          <div>IseeWinner</div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport CardList from \"./components/CardList\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CardList />\n    </div>\n  );\n};\n\nexport default App;\n","import { CardState, CardAction, CardActionTypes } from \"../../types/cards\";\n\nconst initialState = {\n  cards: [],\n  liked: false,\n  loading: false,\n  error: null,\n};\n\nexport const cardReducer = (\n  state: CardState = initialState,\n  action: CardAction\n): CardState => {\n  switch (action.type) {\n    case CardActionTypes.FETCH_CARD:\n      return { ...state, loading: true };\n\n    case CardActionTypes.FETCH_CARD_SUCCES:\n      return { ...state, loading: false, cards: action.payload };\n\n    case CardActionTypes.FETCH_CARD_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    case CardActionTypes.CARD_LIKE:\n      return {\n        ...state,\n        cards: state.cards.map((el) => {\n          el.id === action.payload && (el.liked = !el.liked);\n          return el;\n        }),\n      };\n\n    case CardActionTypes.CARD_DEL:\n      return {\n        ...state,\n        cards: state.cards.filter((el) => el.id !== action.payload),\n      };\n\n    case CardActionTypes.SHOW_LIKED_CARDS:\n      return {\n        ...state,\n        liked: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { cardReducer } from \"./cardReducer\";\n\nexport const rootReducer = combineReducers({\n  card: cardReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { rootReducer } from \"./reducers/index\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
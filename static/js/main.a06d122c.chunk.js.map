{"version":3,"sources":["types/cards.ts","hooks/useTypedSelector.ts","plugins/api.ts","store/action-creators/card.ts","store/action-creators/index.ts","hooks/useActions.ts","components/FoxCard/index.tsx","components/CardList/index.tsx","App.tsx","store/reducers/cardReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["CardActionTypes","useTypedSelector","useSelector","api","axios","create","baseURL","interceptors","response","use","res","data","error","Promise","reject","fetchCards","dispatch","a","result","type","FETCH_CARD","i","push","get","all","FETCH_CARD_ERROR","payload","arrayId","map","el","idMatch","link","match","includes","id","isLiked","FETCH_CARD_SUCCES","likeCard","CARD_LIKE","delCard","CARD_DEL","showLikedCards","showOnlyLiked","SHOW_LIKED_CARDS","CardActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","FoxCard","imageUrl","className","src","alt","onClick","path","mdiCardsHeart","size","color","mdiDelete","areEqual","prevIsLiked","prevShowOnlyLiked","nextIsLiked","memo","CardList","state","card","cards","loading","useEffect","checked","onChange","length","image","App","initialState","rootReducer","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a06d122c.chunk.js","sourcesContent":["export enum CardActionTypes {\n  FETCH_CARD = \"FETCH_CARD\",\n  FETCH_CARD_SUCCES = \"FETCH_CARD_SUCCES\",\n  FETCH_CARD_ERROR = \"FETCH_CARD_ERROR\",\n  CARD_LIKE = \"CARD_LIKE\",\n  CARD_DEL = \"CARD_DEL\",\n  SHOW_LIKED_CARDS = \"SHOW_LIKED_CARDS\",\n}\n\ninterface FetchCardsAction {\n  type: CardActionTypes.FETCH_CARD;\n}\n\ninterface FetchCardsSuccesAction {\n  type: CardActionTypes.FETCH_CARD_SUCCES;\n  payload: Array<CardType>;\n}\n\ninterface FetchCardsErrorAction {\n  type: CardActionTypes.FETCH_CARD_ERROR;\n  payload: string;\n}\n\ninterface CardLike {\n  type: CardActionTypes.CARD_LIKE;\n  payload: number;\n}\n\ninterface CardDel {\n  type: CardActionTypes.CARD_DEL;\n  payload: number;\n}\n\ninterface ShowLikedCards {\n  type: CardActionTypes.SHOW_LIKED_CARDS;\n  payload: boolean;\n}\n\nexport interface CardType {\n  image: string;\n  isLiked: boolean;\n  link: string;\n  id: number;\n}\n\nexport interface FoxCardType {\n  // card: CardType;\n  id: number;\n  imageUrl: string;\n  isLiked: boolean;\n  showOnlyLiked: boolean;\n}\n\nexport interface CardState {\n  cards: Array<CardType>;\n  showOnlyLiked: boolean;\n  loading: boolean;\n  error: null | string;\n}\n\nexport type CardAction =\n  | FetchCardsAction\n  | FetchCardsErrorAction\n  | FetchCardsSuccesAction\n  | CardLike\n  | CardDel\n  | ShowLikedCards;\n","import { useSelector, TypedUseSelectorHook } from \"react-redux\";\nimport { RootState } from \"./../store/reducers/index\";\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://randomfox.ca\",\n});\n\napi.interceptors.response.use(\n  (res) => {\n    return res.data;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport default api;\n","import { Dispatch } from \"redux\";\nimport { CardActionTypes, CardAction, CardType } from \"../../types/cards\";\nimport api from \"../../plugins/api\";\n\nexport const fetchCards = () => {\n  return async (dispatch: Dispatch<CardAction>): Promise<void> => {\n    let result: Array<CardType> = [];\n\n    try {\n      dispatch({ type: CardActionTypes.FETCH_CARD });\n      let res: Array<Promise<CardType>> = [];\n\n      for (let i = 0; i < 6; i++) {\n        res.push(api.get(\"/floof/\"));\n      }\n\n      result = await Promise.all(res);\n    } catch (e) {\n      dispatch({\n        type: CardActionTypes.FETCH_CARD_ERROR,\n        payload: \"Произошла ошибка при запросе картинок\",\n      });\n    }\n\n    let arrayId: Array<number> = [];\n\n    result = result.map((el, i) => {\n      let idMatch: RegExpMatchArray | null = el.link.match(/\\d+/);\n      if (idMatch) {\n        if (arrayId.includes(+idMatch[0])) {\n          el.id = +idMatch[0] * ++i * 1001;\n        } else {\n          el.id = +idMatch[0];\n          arrayId.push(+idMatch[0]);\n        }\n      } else {\n        el.id = ++i * 1000;\n      }\n      el.isLiked = false;\n      return el;\n    });\n\n    dispatch({\n      type: CardActionTypes.FETCH_CARD_SUCCES,\n      payload: result,\n    });\n  };\n};\n\nexport const likeCard = (id: number) => {\n  return (dispatch: Dispatch<CardAction>) => {\n    dispatch({\n      type: CardActionTypes.CARD_LIKE,\n      payload: id,\n    });\n  };\n};\n\nexport const delCard = (id: number) => {\n  return (dispatch: Dispatch<CardAction>) => {\n    dispatch({\n      type: CardActionTypes.CARD_DEL,\n      payload: id,\n    });\n  };\n};\n\nexport const showLikedCards = (showOnlyLiked: boolean) => {\n  return (dispatch: Dispatch<CardAction>) => {\n    dispatch({\n      type: CardActionTypes.SHOW_LIKED_CARDS,\n      payload: showOnlyLiked,\n    });\n  };\n};\n","import * as CardActionCreators from \"./card\";\n\nexport default CardActionCreators;\n","import { useDispatch } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport ActionCreators from \"../store/action-creators\";\n\ntype ActionCreatorsType = typeof ActionCreators;\n\nexport const useActions = (): ActionCreatorsType => {\n  const dispatch = useDispatch();\n  return bindActionCreators(ActionCreators, dispatch);\n};\n","import React, { FC, memo } from \"react\";\nimport { FoxCardType } from \"../../types/cards\";\nimport { useActions } from \"../../hooks/useActions\";\n\nimport \"./FoxCard.css\";\n\nimport Icon from \"@mdi/react\";\nimport { mdiCardsHeart, mdiDelete } from \"@mdi/js\";\n\nconst FoxCard: FC<FoxCardType> = ({ imageUrl, isLiked, showOnlyLiked, id }) => {\n  const { likeCard, delCard } = useActions();\n\n  return (\n    <div className={showOnlyLiked && !isLiked ? \"noDisplay\" : \"foxCard\"}>\n      <img src={imageUrl} alt=\"IseeWinner\"></img>\n      <div className=\"description\">\n        <span className=\"foxCardText\">id:{id}</span>\n        <div onClick={() => likeCard(id)}>\n          <Icon\n            className=\"icon\"\n            path={mdiCardsHeart}\n            size={1}\n            color={isLiked ? \"red\" : \"gray\"}\n          />\n        </div>\n        <div onClick={() => delCard(id)}>\n          <Icon className=\"icon\" path={mdiDelete} size={1} color=\"black\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction areEqual(\n  { isLiked: prevIsLiked, showOnlyLiked: prevShowOnlyLiked }: FoxCardType,\n  { isLiked: nextIsLiked, showOnlyLiked: nextShowOnlyLiked }: FoxCardType\n) {\n  return prevShowOnlyLiked === nextShowOnlyLiked\n    ? prevIsLiked === nextIsLiked\n    : nextIsLiked;\n}\n\nexport default memo(FoxCard, areEqual);\n","import React, { FC, useEffect, useMemo } from \"react\";\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\nimport { useActions } from \"../../hooks/useActions\";\n\nimport \"./CardList.css\";\n\nimport FoxCard from \"../FoxCard\";\n\nconst CardList: FC = () => {\n  const { cards, showOnlyLiked, error, loading } = useTypedSelector(\n    (state) => state.card\n  );\n  const { fetchCards, showLikedCards } = useActions();\n\n  useEffect(() => {\n    fetchCards();\n  }, []);\n\n  // const noneCardsToDisplay: boolean = useMemo(() => {\n  //   return (\n  //     !!cards.length &&\n  //     (showOnlyLiked ? !!cards.filter((el) => el.isLiked === showOnlyLiked).length : true)\n  //   );\n  // }, [cards, showOnlyLiked]);\n\n  if (loading) {\n    return <h1>Loading...</h1>;\n  }\n  if (error) {\n    return <h1>Error:{error}</h1>;\n  }\n\n  return (\n    <>\n      <div className=\"header\">\n        <label className=\"switch\">\n          <input\n            type=\"checkbox\"\n            checked={showOnlyLiked}\n            onChange={() => showLikedCards(!showOnlyLiked)}\n          ></input>\n          <span className=\"slider\"></span>\n        </label>\n        <span className=\"checkboxText\">liked</span>\n      </div>\n\n      <div className=\"foxTable\">\n        {cards.length ? (\n          cards.map((card) => (\n            <FoxCard\n              imageUrl={card.image}\n              isLiked={card.isLiked}\n              showOnlyLiked={showOnlyLiked}\n              id={card.id}\n              key={card.id}\n            />\n          ))\n        ) : (\n          <div>IseeWinner</div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport CardList from \"./components/CardList\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <CardList />\n    </div>\n  );\n};\n\nexport default App;\n","import { CardState, CardAction, CardActionTypes } from \"../../types/cards\";\n\nconst initialState = {\n  cards: [],\n  showOnlyLiked: false,\n  loading: false,\n  error: null,\n};\n\nexport const cardReducer = (\n  state: CardState = initialState,\n  action: CardAction\n): CardState => {\n  switch (action.type) {\n    case CardActionTypes.FETCH_CARD:\n      return { ...state, loading: true };\n\n    case CardActionTypes.FETCH_CARD_SUCCES:\n      return { ...state, loading: false, cards: action.payload };\n\n    case CardActionTypes.FETCH_CARD_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    case CardActionTypes.CARD_LIKE:\n      return {\n        ...state,\n        cards: state.cards.map((el) => {\n          el.id === action.payload && (el.isLiked = !el.isLiked);\n          return el;\n        }),\n      };\n\n    case CardActionTypes.CARD_DEL:\n      return {\n        ...state,\n        cards: state.cards.filter((el) => el.id !== action.payload),\n      };\n\n    case CardActionTypes.SHOW_LIKED_CARDS:\n      return {\n        ...state,\n        showOnlyLiked: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { cardReducer } from \"./cardReducer\";\n\nexport const rootReducer = combineReducers({\n  card: cardReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { rootReducer } from \"./reducers/index\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}